version: '3.8'

networks:
  kafka-net:
    driver: bridge

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.3
    container_name: zookeeper
    networks:
      - kafka-net
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_MAX_CLIENT_CNXNS: 0
      ZOOKEEPER_4LW_COMMANDS_WHITELIST: "*"
      JVMFLAGS: "-Xmx512m -Xms512m -Dzookeeper.jute.maxbuffer=4194304"
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.5.3
    container_name: kafka
    networks:
      - kafka-net
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_HEAP_OPTS: "-Xmx512m -Xms512m"
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5

  kafka-setup:
    image: confluentinc/cp-kafka:7.5.3
    container_name: kafka-setup
    networks:
      - kafka-net
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./kafka-setup.sh:/kafka-setup.sh
    command: ["/bin/bash", "/kafka-setup.sh"]

  kafka-consumer:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: kafka-consumer
    networks:
      - kafka-net
    depends_on:
      kafka:
        condition: service_healthy
      kafka-setup:
        condition: service_completed_successfully
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_GROUP_ID=order-processor-group
      - KAFKA_TOPIC=order-status
      - KAFKA_TOPIC_DLQ=order-status-dlq
      - TARGET_SERVICE_URL=http://host.docker.internal:8080/api/v1

  test-producer:
    image: confluentinc/cp-kafka:7.5.3
    container_name: test-producer
    networks:
      - kafka-net
    depends_on:
      kafka:
        condition: service_healthy
      kafka-setup:
        condition: service_completed_successfully
    volumes:
      - ./produce-test-messages.sh:/produce-test-messages.sh
    command: ["/bin/bash", "/produce-test-messages.sh"] 